#include<SPI.h>
//#include<Pixy.h>
#include<Servo.h>
#include <NewPing.h>

#define trig_1   10
#define eco_1    11
#define trig_2   5
#define eco_2    6
#define max_dist   100
#define kp 1.2


NewPing sonar_01(trig_1,eco_1,max_dist);
NewPing sonar_02(trig_2,eco_2,max_dist);



#define kp2 1
#define Kp (-1/2)  
#define servo_offset 90
#define TILT_LIMIT 90
#include <Wire.h>
#include <math.h>
#define Addr 0x1E               // 7-bit address of HMC5883 compass
#define COMPASS_THRESH_T 129
#define COMPASS_THRESH_I 180
#define output1 A0  //output pin of left sharp sensor
#define output2 A1  //output pin of  right sharp sensor
#define kp_compass_02 0.45
#define kp_compass_01 2.0
#define kp_compass_03 0.90



int16_t SET_POINT  = 80;
int count =0;             //count of islands
int flag2 = 0;
int flag = 0 ;            //flag for river detection
Servo myservo;
uint8_t pos, prev_pos =0;
int dist_cm;
int 
kp_op;
int prev_dist = 0,err2 , o_p ,right_count = 0;




void set_servo_position(uint8_t pos)
{
          int i; 
          if(prev_pos<pos)
          {
                for(i=prev_pos; i<=pos; i++)
                {
                    myservo.write(i);
                    delay(5);
                }
          }
          if(pos<prev_pos)
          {  
              for(i=prev_pos; i>=pos; i--)
              {
                  myservo.write(i);
                  delay(5);
              }
          }
          
}

void setup()
{
  
          Serial.begin(9600);
          myservo.attach(9); 
          prev_pos = servo_offset;
          pinMode(3,OUTPUT);
          digitalWrite(3,LOW);
          delay(100);                   
          Wire.begin();
          Wire.beginTransmission(Addr); 
          Wire.write(byte(0x02));       //Mode register address
          Wire.write(byte(0x00));       // Set operating mode to continuous
          Wire.endTransmission();  
          pinMode(4,OUTPUT);
          pinMode(7,OUTPUT);
           digitalWrite(4,HIGH);
         digitalWrite(7,LOW);


}
 
int get_angle()
{
  
  
          int x, y, z;
          double heading;
          int curr_angle;
          // Initiate communications with hmc583l
          Wire.beginTransmission(Addr);
          Wire.write(byte(0x03));       // Send request to X MSB register
          Wire.endTransmission();
        
          Wire.requestFrom(Addr, 6);    // Request 6 bytes; 2 bytes per axis
          if(Wire.available() <=6)      // If 6 bytes available
          {    
            x = Wire.read() << 8 | Wire.read();
            z = Wire.read() << 8 | Wire.read();
            y = Wire.read() << 8 | Wire.read(); 
          }
  
          heading = atan2(y,x);
          if(heading<0)
          {
            heading += 2*M_PI;
          }
          heading =heading*180/M_PI;
          curr_angle = (int)(heading);
         
          return curr_angle;
         
}

void loop()
{
  
  int  angle_i,angle;
  int threshold_value;
  int flag1 = 0;
  int heading;
  int16_t i, blocks, a, err, output, step_size, temp, w, h, area, compass_error, output_compass; 
  {
    
    
      
    {
      
            dist_cm = sonar_01.ping_cm();
            Serial.print("DIstance US 1  :");          
            Serial.println(dist_cm);
            /*
            if(prev_dist < dist_cm)
              err2 = dist_cm - prev_dist;
            else
              err2 = prev_dist - dist_cm ;
              
             o_p = kp*err2;
           */ 
           
            if (dist_cm >0 && dist_cm < 40 )
            {
                  Serial.println("TRANSVERSING LOOP  1 -------------------------------------");
                  while(dist_cm >0 && dist_cm < 40 )
                  {
                          dist_cm = sonar_01.ping_cm();
                          Serial.print("DIstance sharp 1  :");          
                          Serial.println(dist_cm);
                          /*if(prev_dist < dist_cm)
                            err2 = dist_cm - prev_dist;
                          else
                            err2 = prev_dist - dist_cm ;
                            
                           o_p = kp*err2;
                           
                           prev_dist = dist_cm;
                          */ 
                          
                  }        

                  {
                          prev_pos = pos;
                          heading = get_angle();
                          compass_error = (uint16_t)heading-COMPASS_THRESH_T;
                          kp_op = kp_compass_01*compass_error ;
                          pos = 90  +  kp_op;
                          set_servo_position(pos);
                          Serial.println("TAKING THE FIRST TURN ---------------------------------------");  
                          while(  pos > 100  )                       //FIRST TURN 
                          {
                            
                                     prev_pos = pos;
                                     heading = get_angle(); 
                                     Serial.print("HEADING  :");
                                     Serial.println(heading);
                                     compass_error = (uint16_t)heading-COMPASS_THRESH_T;
                                     kp_op = kp_compass_01*compass_error ;
                                     pos = 90  +  kp_op;
                                     set_servo_position(pos);
                                     delay(100);
                          }
                                       
                          prev_pos = pos;
                          set_servo_position(90);
                          Serial.println("******************************************************xxxxxxxxxxxxx*******************");
                          prev_dist = 0;
                          while(right_count < 2)
                          {
                            
                              dist_cm = sonar_02.ping_cm();                
                              Serial.print("Sharp 2 reading outside     ");
                              Serial.println(dist_cm);
                              /*if(prev_dist < dist_cm)
                                err2 =  dist_cm   - prev_dist;
                              else
                                err2 =  prev_dist - dist_cm ;
                                
                              o_p = kp*err2;
                              prev_dist = dist_cm;
                              */
                             if(dist_cm >0 && dist_cm < 30  )
                             {
                                  while(dist_cm >0 && dist_cm < 40 )
                                  {
                                        dist_cm = sonar_02.ping_cm();               
                                        Serial.println("SHARP 2 READING  INSIDE  :         ");
                                        Serial.print(dist_cm);
                                        /*
                                        if(prev_dist < dist_cm)
                                          err2 = dist_cm - prev_dist;
                                        else
                                          err2 = prev_dist - dist_cm ;
                                          
                                         o_p = kp*err2;
                                         prev_dist = dist_cm;
                                        
                                        //delay(5);
                                        */
                                  }
                                  Serial.println("******************----------------------**********************************************  ");                              
                                  right_count++;
                                  Serial.print("---------------------------------------RIGHT COUNT  :  ");
                                  Serial.println(right_count);
                                 Serial.println("******************----------------------**********************************************  ");                              
                              
                              }                              
                          }
                          prev_pos=pos; 
                          heading = get_angle();
                          compass_error = COMPASS_THRESH_I - (uint16_t)heading;
                          kp_op = kp_compass_02*compass_error ;
                          pos = 90  -  kp_op;
                          set_servo_position(pos);
                          while(pos < 90 )                                      //SECOND TURN
                          {
                                    prev_pos = pos; 
                                    heading = get_angle();
                                    Serial.print("Heading : ");
                                    Serial.println(heading);
                               
                                    compass_error = COMPASS_THRESH_I - (uint16_t)heading;
                                    kp_op = kp_compass_02*compass_error ;
                                    pos = 90  -  kp_op;
                                    set_servo_position(pos);
                           }                          
                           prev_pos=pos;
                           set_servo_position(90);
                         
                           flag=0;
                        }
                      
                  }
  
               
            }

    }  
    
   
}  

